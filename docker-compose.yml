services:
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      CURSOR_SECRET: ${CURSOR_SECRET}
      CURSOR_SECRET_ROTATION: ${CURSOR_SECRET_ROTATION}
      CORS_ORIGIN: ${CORS_ORIGIN}
      DB_PATH: /data/game.db
      MIGRATIONS_AUTO_APPLY: "1"
      AUDIT_MAX: "20000"
      REFRESH_SECRET: ${REFRESH_SECRET:-default-refresh-secret-change-in-production}
      AGENT_ENABLED: "${AGENT_ENABLED:-0}"
      AGENT_CONFIG_PATH: "${AGENT_CONFIG_PATH}"
      CACHE_BACKEND: redis
      REDIS_URL: redis://redis:6379
    volumes:
      - api-data:/data
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 6
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
  nginx:
    image: nginx:stable-alpine
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/public:/usr/share/nginx/html:ro
      - ./admin-static:/usr/share/nginx/html-admin:ro
      # SSL (Let's Encrypt) mount points
      - letsencrypt:/etc/letsencrypt:ro
      - certbot-www:/var/www/certbot:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 6
    environment:
      BASIC_AUTH_USER: ${BASIC_AUTH_USER}
      BASIC_AUTH_PASS: ${BASIC_AUTH_PASS}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - NET_RAW
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,size=64m
      - /var/run:rw,noexec,nosuid,size=8m
      - /tmp:rw,noexec,nosuid,size=16m
    # (Optional) Internal scrape of metrics via basic auth could be added here.
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly no --save "" --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
  # Güvenlik sertleştirmesi ilk etapta kapatıldı; stabil çalışma sağlandıktan sonra kademeli eklenebilir.
  # Certbot yenileme servisi (daemon tarzı 12 saatte bir renew)
  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet; sleep 12h; done"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    # İlk sertifika yoksa manuel olarak aşağıdaki komut çalıştırılacak:
    # docker compose run --rm certbot certbot certonly --webroot -w /var/www/certbot -d tcrtsmlatronline.app -d www.tcrtsmlatronline.app --email YOUR_EMAIL --agree-tos --no-eff-email
  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    depends_on:
      - nginx
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN:-}
    volumes:
      - ./cloudflared:/etc/cloudflared:ro
volumes:
  api-data:
  letsencrypt:
  certbot-www:
  redis-data:
