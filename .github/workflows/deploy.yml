name: Deploy to Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check required secrets
        run: |
          [ -n "${{ secrets.SERVER_HOST }}" ] || (echo "Missing SERVER_HOST" && exit 1)
          [ -n "${{ secrets.SERVER_USER }}" ] || (echo "Missing SERVER_USER" && exit 1)
          [ -n "${{ secrets.SERVER_SSH_KEY }}" ] || (echo "Missing SERVER_SSH_KEY" && exit 1)

      - name: Sync repo to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "."
          target: "~/gameby"
          overwrite: true

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CURSOR_SECRET: ${{ secrets.CURSOR_SECRET }}
          CURSOR_SECRET_ROTATION: ${{ secrets.CURSOR_SECRET_ROTATION }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
          BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}
          AGENT_ENABLED: ${{ secrets.AGENT_ENABLED }}
          AGENT_CONFIG_PATH: ${{ secrets.AGENT_CONFIG_PATH }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          envs: JWT_SECRET,CURSOR_SECRET,CURSOR_SECRET_ROTATION,REFRESH_SECRET,CORS_ORIGIN,BASIC_AUTH_USER,BASIC_AUTH_PASS,AGENT_ENABLED,AGENT_CONFIG_PATH
          script_stop: true
          script: |
            set -euo pipefail
            echo "Starting deploy on $(hostname)"
            cd "$HOME/gameby"

            if ! command -v docker >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y
                sudo apt-get install -y ca-certificates curl gnupg
                sudo install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(. /etc/os-release; echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update -y
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              else
                echo "Docker missing and apt-get not available"; exit 1
              fi
            fi

            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin
                DC="docker compose"
              else
                echo "docker compose not available"; exit 1
              fi
            fi

            umask 077
            cat > .env << EOF
            JWT_SECRET=${JWT_SECRET}
            CURSOR_SECRET=${CURSOR_SECRET}
            CURSOR_SECRET_ROTATION=${CURSOR_SECRET_ROTATION}
            REFRESH_SECRET=${REFRESH_SECRET}
            CORS_ORIGIN=${CORS_ORIGIN}
            BASIC_AUTH_USER=${BASIC_AUTH_USER}
            BASIC_AUTH_PASS=${BASIC_AUTH_PASS}
            AGENT_ENABLED=${AGENT_ENABLED}
            AGENT_CONFIG_PATH=${AGENT_CONFIG_PATH}
            EOF

            sudo $DC pull || true
            sudo $DC up -d --build

            for i in {1..30}; do
              curl -fsS http://localhost/health && break || true
              sleep 2
            done
            curl -fsS http://localhost/health || (echo "Health failed"; sudo $DC ps; exit 1)
