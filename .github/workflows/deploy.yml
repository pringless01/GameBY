name: Deploy to Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check required secrets
        run: |
          [ -n "${{ secrets.SERVER_HOST }}" ] || (echo "Missing SERVER_HOST" && exit 1)
          [ -n "${{ secrets.SERVER_USER }}" ] || (echo "Missing SERVER_USER" && exit 1)
          [ -n "${{ secrets.SERVER_SSH_KEY }}" ] || (echo "Missing SERVER_SSH_KEY" && exit 1)

      - name: Preflight connectivity check
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          PORT: ${{ secrets.SERVER_PORT }}
        run: |
          set -euo pipefail
          echo "Host: $HOST"
          getent hosts "$HOST" || true
          echo "ICMP ping (may be blocked):" || true
          ping -c 1 -W 1 "$HOST" || true
          CANDIDATES="${PORT:-} 22 2222"
          for P in $CANDIDATES; do
            [ -z "$P" ] && continue
            echo "Testing TCP $HOST:$P"
            (echo > /dev/tcp/$HOST/$P) >/dev/null 2>&1 && echo "PORT $P OPEN" || echo "PORT $P CLOSED"
          done

      - name: Write SSH key
        env:
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
        run: |
          set -euo pipefail
          KEYFILE="$RUNNER_TEMP/gameby_deploy_key"
          printf "%s\n" "$SERVER_SSH_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"
          echo "KEYFILE=$KEYFILE" >> $GITHUB_ENV

      - name: Prepare target directory
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USER: ${{ secrets.SERVER_USER }}
          PORT: ${{ secrets.SERVER_PORT }}
        run: |
          set -euo pipefail
          CANDIDATES="${PORT:-} 22 2222"
          SELECTED_PORT=""
          for P in $CANDIDATES; do
            [ -z "$P" ] && continue
            echo "[prepare] trying ssh port $P"
            if ssh -i "$KEYFILE" -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$P" "$USER@$HOST" "echo ok"; then
              SELECTED_PORT="$P"; break
            fi
          done
          [ -n "$SELECTED_PORT" ] || { echo "SSH connection failed for all candidate ports"; exit 1; }
          echo "[prepare] using port $SELECTED_PORT"
          ssh -i "$KEYFILE" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$SELECTED_PORT" "$USER@$HOST" "mkdir -p \"\$HOME/gameby\" && echo Prepared \"\$HOME/gameby\""

      - name: Sync repo to server (tar stream)
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USER: ${{ secrets.SERVER_USER }}
          PORT: ${{ secrets.SERVER_PORT }}
        run: |
          set -euo pipefail
          CANDIDATES="${PORT:-} 22 2222"
          SELECTED_PORT=""
          for P in $CANDIDATES; do
            [ -z "$P" ] && continue
            echo "[sync] trying ssh port $P"
            if ssh -i "$KEYFILE" -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$P" "$USER@$HOST" "echo ok"; then
              SELECTED_PORT="$P"; break
            fi
          done
          [ -n "$SELECTED_PORT" ] || { echo "SSH connection failed for all candidate ports"; exit 1; }
          echo "[sync] using port $SELECTED_PORT"
          TAR_EXCLUDES=(
            "--exclude=.git"
            "--exclude=node_modules"
            "--exclude=logs"
            "--exclude=.github/workflows/*.yml~"
          )
          tar -czf - "${TAR_EXCLUDES[@]}" . | ssh -i "$KEYFILE" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$SELECTED_PORT" "$USER@$HOST" 'mkdir -p "$HOME/gameby" && tar -xzf - -C "$HOME/gameby"'

      - name: SSH deploy
        env:
          HOST: ${{ secrets.SERVER_HOST }}
          USER: ${{ secrets.SERVER_USER }}
          PORT: ${{ secrets.SERVER_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CURSOR_SECRET: ${{ secrets.CURSOR_SECRET }}
          CURSOR_SECRET_ROTATION: ${{ secrets.CURSOR_SECRET_ROTATION }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
          BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}
          AGENT_ENABLED: ${{ secrets.AGENT_ENABLED }}
          AGENT_CONFIG_PATH: ${{ secrets.AGENT_CONFIG_PATH }}
        run: |
          set -euo pipefail
          CANDIDATES="${PORT:-} 22 2222"
          SELECTED_PORT=""
          for P in $CANDIDATES; do
            [ -z "$P" ] && continue
            echo "[deploy] trying ssh port $P"
            if ssh -i "$KEYFILE" -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$P" "$USER@$HOST" "echo ok"; then
              SELECTED_PORT="$P"; break
            fi
          done
          [ -n "$SELECTED_PORT" ] || { echo "SSH connection failed for all candidate ports"; exit 1; }
          echo "[deploy] using port $SELECTED_PORT"
          ssh -i "$KEYFILE" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "$SELECTED_PORT" "$USER@$HOST" \
            JWT_SECRET="$JWT_SECRET" \
            CURSOR_SECRET="$CURSOR_SECRET" \
            CURSOR_SECRET_ROTATION="$CURSOR_SECRET_ROTATION" \
            REFRESH_SECRET="$REFRESH_SECRET" \
            CORS_ORIGIN="$CORS_ORIGIN" \
            BASIC_AUTH_USER="$BASIC_AUTH_USER" \
            BASIC_AUTH_PASS="$BASIC_AUTH_PASS" \
            AGENT_ENABLED="$AGENT_ENABLED" \
            AGENT_CONFIG_PATH="$AGENT_CONFIG_PATH" \
            bash -s << 'REMOTE_EOF'
          set -euo pipefail
          echo "Starting deploy on $(hostname)"
          cd "$HOME/gameby"

          if ! command -v docker >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(. /etc/os-release; echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            else
              echo "Docker missing and apt-get not available"; exit 1
            fi
          fi

          if docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin
              DC="docker compose"
            else
              echo "docker compose not available"; exit 1
            fi
          fi

          umask 077
          cat > .env << EOF
          JWT_SECRET=${JWT_SECRET}
          CURSOR_SECRET=${CURSOR_SECRET}
          CURSOR_SECRET_ROTATION=${CURSOR_SECRET_ROTATION}
          REFRESH_SECRET=${REFRESH_SECRET}
          CORS_ORIGIN=${CORS_ORIGIN}
          BASIC_AUTH_USER=${BASIC_AUTH_USER}
          BASIC_AUTH_PASS=${BASIC_AUTH_PASS}
          AGENT_ENABLED=${AGENT_ENABLED}
          AGENT_CONFIG_PATH=${AGENT_CONFIG_PATH}
          EOF

          sudo $DC pull || true
          sudo $DC up -d --build

          for i in {1..30}; do
            curl -fsS http://127.0.0.1/health && break || true
            sleep 2
          done
          curl -fsS http://127.0.0.1/health || (echo "Health failed"; sudo $DC ps; exit 1)
          REMOTE_EOF
